Executing: codex exec --dangerously-bypass-approvals-and-sandbox Create technical implementation roadmap for EU consultant monetization:

1. Web MVP architecture (React + TypeScript):
   - Document upload interface  
   - AI analysis pipeline integration
   - Demo components for deadline validator and research agent
   - Responsive design for consultant workflow

2. Figma MCP integration setup:
   - Server configuration for design automation
   - Template generation pipeline  
   - Bulk design update workflows
   - Export functionality (PowerPoint/PDF)

3. Stripe payment system:
   - Subscription model (€299/month)
   - Usage-based billing options
   - European payment compliance (SEPA, PSD2)
   - Tax handling for EU countries

4. Deployment strategy:
   - Vercel/Netlify configuration
   - Environment variables setup
   - CI/CD pipeline for rapid iteration
   - Domain and SSL configuration

Generate detailed technical specifications and implementation order.

Project Context: EUFM (European Union Funds Manager) - AI Agent Orchestration System
Working Directory: /Users/panda/Desktop/EUFM
Project Type: TypeScript/Node.js multi-agent coordination system
Note: Follow the BaseAgent pattern in src/agents/ and register in AgentFactory

Safety Guidelines:
- Preserve existing functionality when modifying files
- Follow TypeScript best practices and existing code patterns
- Add proper error handling and logging
- Test changes before completing
Working Directory: /Users/panda/Desktop/EUFM
Timeout: 600000 ms

[2025-09-08T17:20:41] OpenAI Codex v0.30.0 (research preview)
--------
workdir: /Users/panda/Desktop/EUFM
model: gpt-5
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: medium
reasoning summaries: auto
--------
[2025-09-08T17:20:41] User instructions:
Create technical implementation roadmap for EU consultant monetization:

1. Web MVP architecture (React + TypeScript):
   - Document upload interface  
   - AI analysis pipeline integration
   - Demo components for deadline validator and research agent
   - Responsive design for consultant workflow

2. Figma MCP integration setup:
   - Server configuration for design automation
   - Template generation pipeline  
   - Bulk design update workflows
   - Export functionality (PowerPoint/PDF)

3. Stripe payment system:
   - Subscription model (€299/month)
   - Usage-based billing options
   - European payment compliance (SEPA, PSD2)
   - Tax handling for EU countries

4. Deployment strategy:
   - Vercel/Netlify configuration
   - Environment variables setup
   - CI/CD pipeline for rapid iteration
   - Domain and SSL configuration

Generate detailed technical specifications and implementation order.

Project Context: EUFM (European Union Funds Manager) - AI Agent Orchestration System
Working Directory: /Users/panda/Desktop/EUFM
Project Type: TypeScript/Node.js multi-agent coordination system
Note: Follow the BaseAgent pattern in src/agents/ and register in AgentFactory

Safety Guidelines:
- Preserve existing functionality when modifying files
- Follow TypeScript best practices and existing code patterns
- Add proper error handling and logging
- Test changes before completing

[2025-09-08T17:20:48] thinking

**Creating a roadmap document**

I need to create a technical implementation roadmap as requested by the user, focusing on documentation rather than code changes. Even though we're working in a developer environment, I want to ensure we're clear and concise. The plan for implementation will include structured sections order, covering tasks related to monetization like web MVP, Figma MCP integration, and Stripe payment. I'll outline components, APIs, data models, error handling, testing, telemetry, security, and environment variable names. Let's provide a complete step-by-step guide.
**Preparing to add a markdown file**

I see we have full filesystem access, so I can add a markdown file to the repo. The sandbox is set to full access, allowing us to write without needing approvals. However, I still need to include a preamble before running shell commands, following the guidelines. I’ll use the apply_patch tool and first inspect the repo structure to find the right document location, aiming for the path /Users/panda/Desktop/EUFM. Let's run a quick file listing to locate existing docs like AGENTS.md.
[2025-09-08T17:20:52] codex
**Preparing to add a markdown file**

I see we have full filesystem access, so I can add a markdown file to the repo. The sandbox is set to full access, allowing us to write without needing approvals. However, I still need to include a preamble before running shell commands, following the guidelines. I’ll use the apply_patch tool and first inspect the repo structure to find the right document location, aiming for the path /Users/panda/Desktop/EUFM. Let's run a quick file listing to locate existing docs like AGENTS.md.
[2025-09-08T17:20:52] codex

I’m going to scan the repo to understand its structure and where to place a roadmap document, then add a detailed technical roadmap file under a docs folder.
[2025-09-08T17:20:53] exec bash -lc 'ls -la && rg -n "AGENTS.md|AgentFactory|src|README|docs" -S || true' in /Users/panda/Desktop/EUFM
[2025-09-08T17:20:53] bash -lc 'ls -la && rg -n "AGENTS.md|AgentFactory|src|README|docs" -S || true' succeeded in 483ms:
total 1320
drwxr-xr-x   80 panda  staff   2560 Sep  8 20:18 .
drwx------+  17 panda  staff    544 Sep  7 19:35 ..
-rw-r--r--@   1 panda  staff  10244 Sep  7 18:05 .DS_Store
drwxr-xr-x    3 panda  staff     96 Sep  8 20:03 .claude
drwxr-xr-x    3 panda  staff     96 Sep  8 16:46 .cursor
-rw-r--r--    1 panda  staff    798 Sep  8 13:28 .env
-rw-r--r--    1 panda  staff    196 Sep  7 21:10 .env.example
drwxr-xr-x   17 panda  staff    544 Sep  8 20:03 .git
drwxr-xr-x    3 panda  staff     96 Sep  3 11:39 .github
-rw-r--r--    1 panda  staff     71 Sep  8 15:04 .gitignore
-rw-r--r--    1 panda  staff   6792 Sep  8 17:14 AGENTS.md
-rw-r--r--    1 panda  staff   5024 Sep  8 19:19 AGENT_QUICK_REFERENCE.md
-rw-r--r--    1 panda  staff   5123 Sep  8 17:38 CLAUDE_CODE_INSTRUCTIONS.md
-rw-r--r--    1 panda  staff   7825 Sep  8 17:31 CLAUDE_CODE_ORIENTATION.md
-rw-r--r--    1 panda  staff  11019 Sep  6 20:32 CLAUDE_MISSION_BRIEFING.md
-rw-r--r--    1 panda  staff   7089 Sep  8 17:47 CLAUDE_READING_INSTRUCTION.md
-rw-r--r--    1 panda  staff  15420 Sep  6 21:26 CLAUDE_SESSION_MEMORY.md
-rw-r--r--    1 panda  staff   2966 Sep  7 18:11 CLAUDE_SESSION_STARTER.md
-rw-r--r--    1 panda  staff  15118 Sep  8 13:02 CODEX_HANDOFF_BRIEFING.md
[2025-09-08T17:20:53] tokens used: 2380

[2025-09-08T17:21:02] thinking

**Organizing project documentation**

I see we have a docs directory and a large repo filled with the roadmap in a structured format, possibly naming it docs/roadmaps/EU documents. There's also a subproject for the consultant portal that seems to be the web MVP. I think we should put_consultant_monetization_roadmap.md or docs/IMPLEMENTATION_ROADMAP_MONETIZATION.md, ensuring it stays under the 500 lines guideline. The roadmap will include detailed specs and implementation order, structured with headers and bullet lists. I'll also reference key components like the BaseAgent pattern and necessary agents for the roadmap.
**Detailing environment variables and APIs**

I need to include names for key environment variables like STRIPE_SECRET_KEY, FIGMA_TOKEN, and settings for storage and export configurations. I'll define APIs for tasks like uploading and analysis using methods like POST and GET. Additionally, I'll establish TypeScript data models, including Document and User, and set up a basic in-memory queue for the MVP. For Figma MCP integration, I’ll ensure the configuration scripts are outlined, enabling efficient use of export functions and compliance with Stripe’s EU tax regulations.
**Planning the technical roadmap**

I’m focusing on usage-based billing through Stripe's metered billing, which will involve setting price objects. For deployment, we’ll use Vercel for the consultant portal with Vite/React, and consider backend functions on Vercel’s Edge or Serverless infrastructure. CI/CD will be handled via GitHub Actions, ensuring linting and build processes, with an optional Playwright step. 

I’ll create a detailed technical roadmap document under docs/roadmaps/eufm_monetization_technical_roadmap.md. I need to ensure that the docs/roadmaps directory exists, and if not, I'll create it. We’ll aim for 200-300 lines, ensuring all details are concise and clear.
**Summarizing and referencing files**

I see that the guidelines allow me to reference files instead of displaying their full contents, so I can create a summary and direct users to the file path instead. I need to structure the final message with bullet points, which will make it easier to read. I can also provide a brief overview and indicate where the complete roadmap can be found. This fits nicely with the guideline of not needing to show lengthy documents. Now, I'll go ahead and add the file.
[2025-09-08T17:21:14] codex
**Detailing environment variables and APIs**

I need to include names for key environment variables like STRIPE_SECRET_KEY, FIGMA_TOKEN, and settings for storage and export configurations. I'll define APIs for tasks like uploading and analysis using methods like POST and GET. Additionally, I'll establish TypeScript data models, including Document and User, and set up a basic in-memory queue for the MVP. For Figma MCP integration, I’ll ensure the configuration scripts are outlined, enabling efficient use of export functions and compliance with Stripe’s EU tax regulations.
[2025-09-08T17:21:14] codex
**Planning the technical roadmap**

I’m focusing on usage-based billing through Stripe's metered billing, which will involve setting price objects. For deployment, we’ll use Vercel for the consultant portal with Vite/React, and consider backend functions on Vercel’s Edge or Serverless infrastructure. CI/CD will be handled via GitHub Actions, ensuring linting and build processes, with an optional Playwright step. 

I’ll create a detailed technical roadmap document under docs/roadmaps/eufm_monetization_technical_roadmap.md. I need to ensure that the docs/roadmaps directory exists, and if not, I'll create it. We’ll aim for 200-300 lines, ensuring all details are concise and clear.
[2025-09-08T17:21:14] codex
**Summarizing and referencing files**

I see that the guidelines allow me to reference files instead of displaying their full contents, so I can create a summary and direct users to the file path instead. I need to structure the final message with bullet points, which will make it easier to read. I can also provide a brief overview and indicate where the complete roadmap can be found. This fits nicely with the guideline of not needing to show lengthy documents. Now, I'll go ahead and add the file.
[2025-09-08T17:21:14] codex

I’ll add a new roadmap document under docs/roadmaps with detailed specs and phased implementation order aligned to your points.
[2025-09-08T17:22:33] tokens used: 9230

[2025-09-08T17:22:41] thinking

**Correcting patch formatting**

I noticed that the apply_patch format failed due to quoting issues, and the error indicates there's an "invalid hunk at line 145." This points to the "apply_patch" parser expecting no "hunk" sections since it’s meant for adding a file. I realize that for the Add File section, all subsequent lines must start with a plus sign. I forgot to include those plus signs, so I'll need to redo this with the correct formatting.
[2025-09-08T17:24:14] apply_patch auto_approved=true:
A /Users/panda/Desktop/EUFM/docs/roadmaps/EUFM_monetization_technical_roadmap.md
# EUFM Monetization Technical Implementation Roadmap

Scope: EU consultant monetization MVP across Web app, Figma MCP integration, Stripe billing, and deployment. Project type: TypeScript/Node.js multi‑agent orchestration. Follow BaseAgent pattern and register in AgentFactory.

Owner: EUFM Core Engineering • Updated: 2025‑09‑08

---

## 0) Guiding Principles

- BaseAgent pattern: all new agents extend `BaseAgent` and register in `src/orchestrator/agentFactory.ts`.
- Safety/quality: strict TypeScript, narrow interfaces, input validation, try/catch on all async boundaries, structured logging.
- Performance: async pipelines, streaming where possible, lazy imports, files < 500 LoC, single‑responsibility functions.
- EU compliance: GDPR, PSD2/SCA, SEPA, VAT via Stripe Tax, audit logs for billing events.
- Phasing: deliver in small, testable slices; avoid big‑bang merges.

---

## Phase 1 — Web MVP (React + TypeScript)

Goal: Consultant workflow UI with document upload, AI analysis pipeline hooks, demo components (deadline validator, research agent), responsive layout.

Target repo area: `consultant-portal/` (Vite + React TS + Tailwind present)

### 1.1 UI Architecture & Routing

- Pages: `Upload`, `Analysis`, `Billing`, `Settings`, `Auth` (optional)
- State: lightweight global store (Zustand already present at `consultant-portal/src/store/useAppStore.ts`).
- Routing: React Router with code-splitting per route.
- Layout: responsive dashboard shell with left nav (Upload, Analysis, Research, Billing) + top bar (account/SaaS plan).

### 1.2 Document Upload Interface

- Component: `UploadArea` (drag-and-drop + file picker) supporting PDF/DOCX/CSV.
- Client constraints: max size (e.g., 20MB), file type whitelist.
- API: `POST /api/upload` → returns `jobId` and `documentId`.
- Storage (MVP): local `tmp/` or object store emulator; production: S3/GCS. Abstract via `src/tools/storageAdapter.ts`.
- Virus scan placeholder: basic MIME/type guard; roadmap hook for ClamAV or cloud AV.

### 1.3 AI Analysis Pipeline Integration (MVP contract)

- API: `POST /api/analysis/start` with `{ documentId, analyses: ["deadline", "research"] }` → returns `jobId`.
- API: `GET /api/analysis/:jobId` → returns status + partial results (stream-friendly model later).
- Agent orchestration: server handler invokes `src/orchestrator/agentFactory.ts` to get appropriate agents.
- Types: `AnalysisJob`, `AnalysisResult`, `DeadlineValidation`, `ResearchSummary` in `src/types/analysis.ts`.
- Minimal queue: in-memory job map for MVP; optional BullMQ + Redis later.

### 1.4 Demo Components

- Deadline Validator: `DeadlineCard` showing program, due date, days remaining, risk flags. Backed by `DeadlineValidatorAgent`.
- Research Agent: `ResearchPanel` with query input, related calls, sources; backed by `EnhancedAbacusAgent` (or `ResearchAgent`).
- Loading/streaming UX: skeletons + progressive hydration of panels as results land.

### 1.5 Error Handling & Telemetry

- Client: toast + inline error banners; retry on transient 5xx.
- Server: try/catch all handlers; map to 4xx/5xx; structured logs with requestId.
- Observability: simple request logging to `logs/` (existing) + `console` in dev; hook for hosted logs later.

### 1.6 Security & Privacy

- Auth (MVP optional): email link or Clerk/Auth0; gate billing and analysis start behind auth if enabled.
- PII handling: don’t persist document content server logs; redact paths/ids.
- CORS: restrict to configured domain.

Deliverables

- Components: `UploadArea.tsx`, `DeadlineCard.tsx`, `ResearchPanel.tsx`, `AnalysisStatus.tsx`.
- API routes: `/api/upload`, `/api/analysis/start`, `/api/analysis/:jobId` (server runtime aligned with deployment provider).
- Types: `src/types/analysis.ts`.
- Agents: `src/agents/deadlineValidatorAgent.ts`, `src/agents/researchAgent.ts` (BaseAgent pattern) + registration in AgentFactory.

---

## Phase 2 — Figma MCP Integration

Goal: Design automation server and workflows to generate decks/templates, run bulk updates, and export to PPT/PDF.

### 2.1 MCP Server Setup

- Config: add MCP entry (Cursor/Figma Developer MCP).
- Example JSON (Cursor):
  ```json
  {
    "mcpServers": {
      "figma-developer-mcp": { "command": "npx", "args": ["-y", "figma-developer-mcp"] }
    }
  }
  ```
- Env: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, optional `FIGMA_FILE_ID`.

### 2.2 Integration Agent

- New agent: `src/agents/figmaMCPAgent.ts` implementing BaseAgent.
- Capabilities:
  - Generate templates (JSON design spec → Figma frames/components).
  - Bulk update text styles, logos, colors via MCP actions.
  - Export frames/pages to PNG/PDF; feed into PPT pipeline.
- Inputs: `{ templateType: 'pitch'|'one-pager'|'infographic', data: Record<string,unknown>, bulk?: boolean }`.
- Outputs: `{ exportedUrls: string[], figmaNodeIds: string[] }`.

### 2.3 Template Generation Pipeline

- JSON templates stored in `templates/figma/*.json` (deck, infographic, UI kit).
- Mapping util: `src/tools/figmaTemplateMapper.ts` converts business data → Figma node creation/update ops.
- Validation: AJV schema for template JSON.

### 2.4 Bulk Update Workflows

- Batch operations: branding/color tokens, logo swaps, text placeholders.
- Use MCP batch endpoints when available; otherwise chunked sequential operations with backoff.

### 2.5 Export to PPT/PDF

- PDF: Figma export API (PDF) for frames/pages; store in object storage and return URL.
- PPTX: Build slides via `pptxgenjs` from exported PNGs + structured content; or HTML → PDF via headless Chromium for certain layouts.
- Serverless compatibility: use `@sparticuz/chromium` if headless needed on Vercel/Netlify.

Deliverables

- Agent: `figmaMCPAgent.ts` + registration.
- Templates: `templates/figma/*.json` + AJV schemas.
- Tools: `figmaTemplateMapper.ts`, `exportService.ts`.
- API: `/api/design/generate` and `/api/design/export`.

---

## Phase 3 — Stripe Payments

Goal: Subscriptions (€299/month), usage‑based add‑ons, EU tax compliance, SEPA/PSD2, customer portal.

### 3.1 Stripe Setup

- Env vars: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`, `STRIPE_TAX_REGION`.
- Dashboard:
  - Product: EUFM Pro.
  - Price: recurring monthly €299 (`STRIPE_PRICE_EUR_299`).
  - Tax: enable Stripe Tax, automatic collection on `PaymentIntent`/`CheckoutSession`.
  - Payment methods: `card`, `sepa_debit`; SCA via Payment Intents.

### 3.2 Subscription Flow

- Client: "Upgrade" button → POST `/api/billing/checkout` returns checkout URL → redirect.
- Server: create `CheckoutSession` with mode `subscription`, `automatic_tax: {enabled: true}`, `payment_method_types: ['card','sepa_debit']`, EU locale.
- Success: redirect to `/billing/success` with session id; fetch subscription status.
- Portal: `/api/billing/portal` to create Stripe billing portal session.

### 3.3 Usage‑Based Billing (Add‑ons)

- Define metered price(s) for:
  - Analysis jobs beyond monthly quota.
  - Figma export batches beyond included limit.
- Record usage via `usage_records.create` per job completion.
- Display usage in Billing page with daily aggregation.

### 3.4 Webhooks & State

- Endpoint: `POST /api/stripe/webhook` (raw body).
- Events: `checkout.session.completed`, `invoice.paid`, `invoice.payment_failed`, `customer.subscription.updated|deleted`, `customer.tax_id.created`.
- Persistence: `User`, `Subscription`, `Usage` models (MVP can be JSON file or SQLite; production Postgres).
- Idempotency: store processed event ids; return 2xx fast.
- Logging: structured event logs, mask PII.

### 3.5 EU Compliance

- PSD2/SCA: always use Payment Intents/Checkout; offload SCA to Stripe.
- SEPA: enable mandate for `sepa_debit`; note delayed settlement.
- VAT: enable Stripe Tax, collect customer tax ID and billing country; show tax breakdown; store tax IDs on Customer.
- Invoices: ensure tax rates applied; provide downloadable invoices in portal.

Deliverables

- API: `/api/billing/checkout`, `/api/billing/portal`, `/api/stripe/webhook`.
- Client: `BillingPage` with plan, status, payment method, usage.
- Models: `src/types/billing.ts`.
- Agent (optional): `stripeBillingAgent.ts` to encapsulate billing ops for orchestrator‑driven flows.

---

## Phase 4 — Deployment Strategy

Goal: Reliable hosting with fast iteration. Primary: Vercel; Alternative: Netlify.

### 4.1 Hosting & Build

- Vercel projects: `consultant-portal` (frontend + API routes). Framework preset: Vite/React.
- Configure serverless API routes under `api/` or framework’s `functions/` directory.
- Edge/runtime choices: default Node serverless for Stripe webhooks (needs raw body), not Edge runtime.

### 4.2 Environment Variables

- Vercel envs: add all secrets for `Production`, `Preview`, `Development`.
- Required keys:
  - Stripe: `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_PRICE_EUR_299`.
  - Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`.
  - Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
  - App: `APP_BASE_URL`, `ALLOWED_ORIGINS`.

### 4.3 CI/CD

- GitHub Actions workflow:
  - Jobs: `lint` (ESLint), `typecheck` (tsc), `build` (vite build), `test` (unit only), `preview-deploy`.
  - Required checks before merge to `main`.
- Vercel Git integration for preview deployments on PRs.

### 4.4 Domain & SSL

- Add domain in Vercel; configure DNS; SSL auto‑provisioned.
- Force HTTPS; HSTS header; CORS aligned to primary domain.

Deliverables

- `.vercel/project.json` (auto by Vercel), `vercel.json` for function config (raw body for webhooks).
- `.github/workflows/ci.yml` with lint/typecheck/build/test.

---

## Data Models (MVP)

```ts
// src/types/analysis.ts
export type AnalysisType = 'deadline' | 'research';

export interface DocumentMeta {
  id: string;
  name: string;
  mimeType: string;
  size: number;
  storageKey: string;
  uploadedAt: string;
}

export interface AnalysisJob {
  id: string;
  documentId: string;
  types: AnalysisType[];
  status: 'queued' | 'running' | 'completed' | 'failed';
  results?: AnalysisResult;
  error?: string;
}

export interface DeadlineValidation {
  program: string;
  dueDate: string;
  daysRemaining: number;
  risks: string[];
}

export interface ResearchSummary {
  queries: string[];
  findings: { title: string; url?: string; summary: string }[];
}

export interface AnalysisResult {
  deadline?: DeadlineValidation;
  research?: ResearchSummary;
}
```

```ts
// src/types/billing.ts
export interface SubscriptionState {
  status: 'inactive' | 'trialing' | 'active' | 'past_due' | 'canceled' | 'unpaid';
  priceId?: string;
  currentPeriodEnd?: string;
}

export interface UsageRecordInput {
  metric: 'analysis_job' | 'export_batch';
  quantity: number;
  timestamp: number;
}
```

---

## API Contract (MVP)

- `POST /api/upload`
  - Body: form‑data `file`
  - 200: `{ documentId: string }`

- `POST /api/analysis/start`
  - Body: `{ documentId: string, analyses: AnalysisType[] }`
  - 200: `{ jobId: string }`

- `GET /api/analysis/:jobId`
  - 200: `AnalysisJob`

- `POST /api/design/generate`
  - Body: `{ templateType, data, bulk? }`
  - 200: `{ jobId: string }`

- `POST /api/design/export`
  - Body: `{ fileId|nodeIds, format: 'pdf'|'png'|'pptx' }`
  - 200: `{ urls: string[] }`

- `POST /api/billing/checkout`
  - Body: `{ priceId?: string, successUrl, cancelUrl }`
  - 200: `{ url: string }`

- `POST /api/billing/portal`
  - 200: `{ url: string }`

- `POST /api/stripe/webhook` (raw body)
  - 2xx on success; idempotent.

---

## New Agents (BaseAgent + AgentFactory registration)

- `src/agents/deadlineValidatorAgent.ts`
  - Input: `{ documentId }` → parses deadlines; uses EU calendar utils.
  - Output: `DeadlineValidation`.

- `src/agents/researchAgent.ts`
  - Input: `{ topic, constraints? }` → structured web research using existing research tooling.
  - Output: `ResearchSummary`.

- `src/agents/figmaMCPAgent.ts`
  - Input: template + data; Output: export URLs and nodeIds.

- `src/agents/stripeBillingAgent.ts` (optional wrapper)
  - Input: `{ userId, action, payload }`; handles checkout/portal/usage record creation.

Registration: update `src/orchestrator/agentFactory.ts` with type → constructor map; add `type` strings: `deadline-validator`, `research`, `figma-mcp`, `stripe-billing`.

---

## Security, Compliance, Logging

- Input validation: Zod/AJV at all API boundaries.
- AuthZ: gate billing and analysis write endpoints to authenticated users (if auth added in MVP+1).
- Secrets: never log; restrict to server runtime; rotate regularly.
- GDPR: enable deletion of documents on request; data retention config; avoid storing raw PII in logs.
- Stripe webhook: verify signatures; store only minimal billing metadata.
- Structured logging: `{ level, ts, reqId, userId?, route, message, data }` to `logs/` and stdout.

---

## Testing Strategy (MVP)

- Type checks: `tsc --noEmit` in CI.
- Unit tests: pure utils (deadline calc, template mapper, API validators).
- Integration tests: mocked handlers for `/api/analysis/*` and billing handlers with Stripe SDK mocked.
- Manual E2E smoke: upload → analysis start → status polling; upgrade to billing; run webhook simulation.

---

## Implementation Order (Phased Sprints)

1) Web MVP foundations
   - Router, layout, state, Upload UI, API stubs.
   - Types for analysis; in‑memory job registry.
   - DeadlineValidatorAgent + UI card.
   - ResearchAgent + panel.

2) Figma MCP core path
   - Configure MCP server + env.
   - Implement `figmaMCPAgent` with template JSON and mapper.
   - `/api/design/generate` and `/api/design/export` + storage.

3) Stripe subscriptions
   - Checkout/Portal endpoints + Billing page.
   - Webhook handler with idempotency + state mapping.
   - Enable Stripe Tax and SEPA; capture tax IDs.

4) Deployment & CI/CD
   - Vercel project + env vars; ensure webhook uses Node runtime.
   - GitHub Actions: lint/typecheck/build/test.
   - Domain + SSL + security headers.

5) Usage‑based add‑ons (post‑MVP)
   - Metered prices; usage records per analysis/export.
   - Billing UI for usage charts.

6) Hardening & UX polish
   - Error states, retries, telemetry dashboards.
   - Auth enablement if needed; data retention controls.

---

## Env Vars (Summary)

- Stripe: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`.
- Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, `FIGMA_FILE_ID` (optional per template).
- Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
- App: `APP_BASE_URL`, `ALLOWED_ORIGINS`, `NODE_ENV`.

---

## Notes & Next Steps

- Reuse existing research tooling listed in `SYSTEM_LATEST_IMPLEMENTATIONS.md` for the Research agent if available.
- Ensure `vercel.json` marks webhook route with `"bodyParser": false` (raw body) or framework‑specific equivalent.
- Keep each new file < 500 lines; split mappers and validators.
- Document API examples in `docs/api/` once endpoints stabilize.

[2025-09-08T17:24:14] apply_patch(auto_approved=true) exited 0 in 475ms:
Success. Updated the following files:
A docs/roadmaps/EUFM_monetization_technical_roadmap.md
[2025-09-08T17:24:14] turn diff:
diff --git a/docs/roadmaps/EUFM_monetization_technical_roadmap.md b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
new file mode 100644
index 0000000000000000000000000000000000000000..188500a0bc4a4b70e70939990eee3639775aa93f
--- /dev/null
+++ b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
@@ -0,0 +1,398 @@
+# EUFM Monetization Technical Implementation Roadmap
+
+Scope: EU consultant monetization MVP across Web app, Figma MCP integration, Stripe billing, and deployment. Project type: TypeScript/Node.js multi‑agent orchestration. Follow BaseAgent pattern and register in AgentFactory.
+
+Owner: EUFM Core Engineering • Updated: 2025‑09‑08
+
+---
+
+## 0) Guiding Principles
+
+- BaseAgent pattern: all new agents extend `BaseAgent` and register in `src/orchestrator/agentFactory.ts`.
+- Safety/quality: strict TypeScript, narrow interfaces, input validation, try/catch on all async boundaries, structured logging.
+- Performance: async pipelines, streaming where possible, lazy imports, files < 500 LoC, single‑responsibility functions.
+- EU compliance: GDPR, PSD2/SCA, SEPA, VAT via Stripe Tax, audit logs for billing events.
+- Phasing: deliver in small, testable slices; avoid big‑bang merges.
+
+---
+
+## Phase 1 — Web MVP (React + TypeScript)
+
+Goal: Consultant workflow UI with document upload, AI analysis pipeline hooks, demo components (deadline validator, research agent), responsive layout.
+
+Target repo area: `consultant-portal/` (Vite + React TS + Tailwind present)
+
+### 1.1 UI Architecture & Routing
+
+- Pages: `Upload`, `Analysis`, `Billing`, `Settings`, `Auth` (optional)
+- State: lightweight global store (Zustand already present at `consultant-portal/src/store/useAppStore.ts`).
+- Routing: React Router with code-splitting per route.
+- Layout: responsive dashboard shell with left nav (Upload, Analysis, Research, Billing) + top bar (account/SaaS plan).
+
+### 1.2 Document Upload Interface
+
+- Component: `UploadArea` (drag-and-drop + file picker) supporting PDF/DOCX/CSV.
+- Client constraints: max size (e.g., 20MB), file type whitelist.
+- API: `POST /api/upload` → returns `jobId` and `documentId`.
+- Storage (MVP): local `tmp/` or object store emulator; production: S3/GCS. Abstract via `src/tools/storageAdapter.ts`.
+- Virus scan placeholder: basic MIME/type guard; roadmap hook for ClamAV or cloud AV.
+
+### 1.3 AI Analysis Pipeline Integration (MVP contract)
+
+- API: `POST /api/analysis/start` with `{ documentId, analyses: ["deadline", "research"] }` → returns `jobId`.
+- API: `GET /api/analysis/:jobId` → returns status + partial results (stream-friendly model later).
+- Agent orchestration: server handler invokes `src/orchestrator/agentFactory.ts` to get appropriate agents.
+- Types: `AnalysisJob`, `AnalysisResult`, `DeadlineValidation`, `ResearchSummary` in `src/types/analysis.ts`.
+- Minimal queue: in-memory job map for MVP; optional BullMQ + Redis later.
+
+### 1.4 Demo Components
+
+- Deadline Validator: `DeadlineCard` showing program, due date, days remaining, risk flags. Backed by `DeadlineValidatorAgent`.
+- Research Agent: `ResearchPanel` with query input, related calls, sources; backed by `EnhancedAbacusAgent` (or `ResearchAgent`).
+- Loading/streaming UX: skeletons + progressive hydration of panels as results land.
+
+### 1.5 Error Handling & Telemetry
+
+- Client: toast + inline error banners; retry on transient 5xx.
+- Server: try/catch all handlers; map to 4xx/5xx; structured logs with requestId.
+- Observability: simple request logging to `logs/` (existing) + `console` in dev; hook for hosted logs later.
+
+### 1.6 Security & Privacy
+
+- Auth (MVP optional): email link or Clerk/Auth0; gate billing and analysis start behind auth if enabled.
+- PII handling: don’t persist document content server logs; redact paths/ids.
+- CORS: restrict to configured domain.
+
+Deliverables
+
+- Components: `UploadArea.tsx`, `DeadlineCard.tsx`, `ResearchPanel.tsx`, `AnalysisStatus.tsx`.
+- API routes: `/api/upload`, `/api/analysis/start`, `/api/analysis/:jobId` (server runtime aligned with deployment provider).
+- Types: `src/types/analysis.ts`.
+- Agents: `src/agents/deadlineValidatorAgent.ts`, `src/agents/researchAgent.ts` (BaseAgent pattern) + registration in AgentFactory.
+
+---
+
+## Phase 2 — Figma MCP Integration
+
+Goal: Design automation server and workflows to generate decks/templates, run bulk updates, and export to PPT/PDF.
+
+### 2.1 MCP Server Setup
+
+- Config: add MCP entry (Cursor/Figma Developer MCP).
+- Example JSON (Cursor):
+  ```json
+  {
+    "mcpServers": {
+      "figma-developer-mcp": { "command": "npx", "args": ["-y", "figma-developer-mcp"] }
+    }
+  }
+  ```
+- Env: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, optional `FIGMA_FILE_ID`.
+
+### 2.2 Integration Agent
+
+- New agent: `src/agents/figmaMCPAgent.ts` implementing BaseAgent.
+- Capabilities:
+  - Generate templates (JSON design spec → Figma frames/components).
+  - Bulk update text styles, logos, colors via MCP actions.
+  - Export frames/pages to PNG/PDF; feed into PPT pipeline.
+- Inputs: `{ templateType: 'pitch'|'one-pager'|'infographic', data: Record<string,unknown>, bulk?: boolean }`.
+- Outputs: `{ exportedUrls: string[], figmaNodeIds: string[] }`.
+
+### 2.3 Template Generation Pipeline
+
+- JSON templates stored in `templates/figma/*.json` (deck, infographic, UI kit).
+- Mapping util: `src/tools/figmaTemplateMapper.ts` converts business data → Figma node creation/update ops.
+- Validation: AJV schema for template JSON.
+
+### 2.4 Bulk Update Workflows
+
+- Batch operations: branding/color tokens, logo swaps, text placeholders.
+- Use MCP batch endpoints when available; otherwise chunked sequential operations with backoff.
+
+### 2.5 Export to PPT/PDF
+
+- PDF: Figma export API (PDF) for frames/pages; store in object storage and return URL.
+- PPTX: Build slides via `pptxgenjs` from exported PNGs + structured content; or HTML → PDF via headless Chromium for certain layouts.
+- Serverless compatibility: use `@sparticuz/chromium` if headless needed on Vercel/Netlify.
+
+Deliverables
+
+- Agent: `figmaMCPAgent.ts` + registration.
+- Templates: `templates/figma/*.json` + AJV schemas.
+- Tools: `figmaTemplateMapper.ts`, `exportService.ts`.
+- API: `/api/design/generate` and `/api/design/export`.
+
+---
+
+## Phase 3 — Stripe Payments
+
+Goal: Subscriptions (€299/month), usage‑based add‑ons, EU tax compliance, SEPA/PSD2, customer portal.
+
+### 3.1 Stripe Setup
+
+- Env vars: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`, `STRIPE_TAX_REGION`.
+- Dashboard:
+  - Product: EUFM Pro.
+  - Price: recurring monthly €299 (`STRIPE_PRICE_EUR_299`).
+  - Tax: enable Stripe Tax, automatic collection on `PaymentIntent`/`CheckoutSession`.
+  - Payment methods: `card`, `sepa_debit`; SCA via Payment Intents.
+
+### 3.2 Subscription Flow
+
+- Client: "Upgrade" button → POST `/api/billing/checkout` returns checkout URL → redirect.
+- Server: create `CheckoutSession` with mode `subscription`, `automatic_tax: {enabled: true}`, `payment_method_types: ['card','sepa_debit']`, EU locale.
+- Success: redirect to `/billing/success` with session id; fetch subscription status.
+- Portal: `/api/billing/portal` to create Stripe billing portal session.
+
+### 3.3 Usage‑Based Billing (Add‑ons)
+
+- Define metered price(s) for:
+  - Analysis jobs beyond monthly quota.
+  - Figma export batches beyond included limit.
+- Record usage via `usage_records.create` per job completion.
+- Display usage in Billing page with daily aggregation.
+
+### 3.4 Webhooks & State
+
+- Endpoint: `POST /api/stripe/webhook` (raw body).
+- Events: `checkout.session.completed`, `invoice.paid`, `invoice.payment_failed`, `customer.subscription.updated|deleted`, `customer.tax_id.created`.
+- Persistence: `User`, `Subscription`, `Usage` models (MVP can be JSON file or SQLite; production Postgres).
+- Idempotency: store processed event ids; return 2xx fast.
+- Logging: structured event logs, mask PII.
+
+### 3.5 EU Compliance
+
+- PSD2/SCA: always use Payment Intents/Checkout; offload SCA to Stripe.
+- SEPA: enable mandate for `sepa_debit`; note delayed settlement.
+- VAT: enable Stripe Tax, collect customer tax ID and billing country; show tax breakdown; store tax IDs on Customer.
+- Invoices: ensure tax rates applied; provide downloadable invoices in portal.
+
+Deliverables
+
+- API: `/api/billing/checkout`, `/api/billing/portal`, `/api/stripe/webhook`.
+- Client: `BillingPage` with plan, status, payment method, usage.
+- Models: `src/types/billing.ts`.
+- Agent (optional): `stripeBillingAgent.ts` to encapsulate billing ops for orchestrator‑driven flows.
+
+---
+
+## Phase 4 — Deployment Strategy
+
+Goal: Reliable hosting with fast iteration. Primary: Vercel; Alternative: Netlify.
+
+### 4.1 Hosting & Build
+
+- Vercel projects: `consultant-portal` (frontend + API routes). Framework preset: Vite/React.
+- Configure serverless API routes under `api/` or framework’s `functions/` directory.
+- Edge/runtime choices: default Node serverless for Stripe webhooks (needs raw body), not Edge runtime.
+
+### 4.2 Environment Variables
+
+- Vercel envs: add all secrets for `Production`, `Preview`, `Development`.
+- Required keys:
+  - Stripe: `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_PRICE_EUR_299`.
+  - Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`.
+  - Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+  - App: `APP_BASE_URL`, `ALLOWED_ORIGINS`.
+
+### 4.3 CI/CD
+
+- GitHub Actions workflow:
+  - Jobs: `lint` (ESLint), `typecheck` (tsc), `build` (vite build), `test` (unit only), `preview-deploy`.
+  - Required checks before merge to `main`.
+- Vercel Git integration for preview deployments on PRs.
+
+### 4.4 Domain & SSL
+
+- Add domain in Vercel; configure DNS; SSL auto‑provisioned.
+- Force HTTPS; HSTS header; CORS aligned to primary domain.
+
+Deliverables
+
+- `.vercel/project.json` (auto by Vercel), `vercel.json` for function config (raw body for webhooks).
+- `.github/workflows/ci.yml` with lint/typecheck/build/test.
+
+---
+
+## Data Models (MVP)
+
+```ts
+// src/types/analysis.ts
+export type AnalysisType = 'deadline' | 'research';
+
+export interface DocumentMeta {
+  id: string;
+  name: string;
+  mimeType: string;
+  size: number;
+  storageKey: string;
+  uploadedAt: string;
+}
+
+export interface AnalysisJob {
+  id: string;
+  documentId: string;
+  types: AnalysisType[];
+  status: 'queued' | 'running' | 'completed' | 'failed';
+  results?: AnalysisResult;
+  error?: string;
+}
+
+export interface DeadlineValidation {
+  program: string;
+  dueDate: string;
+  daysRemaining: number;
+  risks: string[];
+}
+
+export interface ResearchSummary {
+  queries: string[];
+  findings: { title: string; url?: string; summary: string }[];
+}
+
+export interface AnalysisResult {
+  deadline?: DeadlineValidation;
+  research?: ResearchSummary;
+}
+```
+
+```ts
+// src/types/billing.ts
+export interface SubscriptionState {
+  status: 'inactive' | 'trialing' | 'active' | 'past_due' | 'canceled' | 'unpaid';
+  priceId?: string;
+  currentPeriodEnd?: string;
+}
+
+export interface UsageRecordInput {
+  metric: 'analysis_job' | 'export_batch';
+  quantity: number;
+  timestamp: number;
+}
+```
+
+---
+
+## API Contract (MVP)
+
+- `POST /api/upload`
+  - Body: form‑data `file`
+  - 200: `{ documentId: string }`
+
+- `POST /api/analysis/start`
+  - Body: `{ documentId: string, analyses: AnalysisType[] }`
+  - 200: `{ jobId: string }`
+
+- `GET /api/analysis/:jobId`
+  - 200: `AnalysisJob`
+
+- `POST /api/design/generate`
+  - Body: `{ templateType, data, bulk? }`
+  - 200: `{ jobId: string }`
+
+- `POST /api/design/export`
+  - Body: `{ fileId|nodeIds, format: 'pdf'|'png'|'pptx' }`
+  - 200: `{ urls: string[] }`
+
+- `POST /api/billing/checkout`
+  - Body: `{ priceId?: string, successUrl, cancelUrl }`
+  - 200: `{ url: string }`
+
+- `POST /api/billing/portal`
+  - 200: `{ url: string }`
+
+- `POST /api/stripe/webhook` (raw body)
+  - 2xx on success; idempotent.
+
+---
+
+## New Agents (BaseAgent + AgentFactory registration)
+
+- `src/agents/deadlineValidatorAgent.ts`
+  - Input: `{ documentId }` → parses deadlines; uses EU calendar utils.
+  - Output: `DeadlineValidation`.
+
+- `src/agents/researchAgent.ts`
+  - Input: `{ topic, constraints? }` → structured web research using existing research tooling.
+  - Output: `ResearchSummary`.
+
+- `src/agents/figmaMCPAgent.ts`
+  - Input: template + data; Output: export URLs and nodeIds.
+
+- `src/agents/stripeBillingAgent.ts` (optional wrapper)
+  - Input: `{ userId, action, payload }`; handles checkout/portal/usage record creation.
+
+Registration: update `src/orchestrator/agentFactory.ts` with type → constructor map; add `type` strings: `deadline-validator`, `research`, `figma-mcp`, `stripe-billing`.
+
+---
+
+## Security, Compliance, Logging
+
+- Input validation: Zod/AJV at all API boundaries.
+- AuthZ: gate billing and analysis write endpoints to authenticated users (if auth added in MVP+1).
+- Secrets: never log; restrict to server runtime; rotate regularly.
+- GDPR: enable deletion of documents on request; data retention config; avoid storing raw PII in logs.
+- Stripe webhook: verify signatures; store only minimal billing metadata.
+- Structured logging: `{ level, ts, reqId, userId?, route, message, data }` to `logs/` and stdout.
+
+---
+
+## Testing Strategy (MVP)
+
+- Type checks: `tsc --noEmit` in CI.
+- Unit tests: pure utils (deadline calc, template mapper, API validators).
+- Integration tests: mocked handlers for `/api/analysis/*` and billing handlers with Stripe SDK mocked.
+- Manual E2E smoke: upload → analysis start → status polling; upgrade to billing; run webhook simulation.
+
+---
+
+## Implementation Order (Phased Sprints)
+
+1) Web MVP foundations
+   - Router, layout, state, Upload UI, API stubs.
+   - Types for analysis; in‑memory job registry.
+   - DeadlineValidatorAgent + UI card.
+   - ResearchAgent + panel.
+
+2) Figma MCP core path
+   - Configure MCP server + env.
+   - Implement `figmaMCPAgent` with template JSON and mapper.
+   - `/api/design/generate` and `/api/design/export` + storage.
+
+3) Stripe subscriptions
+   - Checkout/Portal endpoints + Billing page.
+   - Webhook handler with idempotency + state mapping.
+   - Enable Stripe Tax and SEPA; capture tax IDs.
+
+4) Deployment & CI/CD
+   - Vercel project + env vars; ensure webhook uses Node runtime.
+   - GitHub Actions: lint/typecheck/build/test.
+   - Domain + SSL + security headers.
+
+5) Usage‑based add‑ons (post‑MVP)
+   - Metered prices; usage records per analysis/export.
+   - Billing UI for usage charts.
+
+6) Hardening & UX polish
+   - Error states, retries, telemetry dashboards.
+   - Auth enablement if needed; data retention controls.
+
+---
+
+## Env Vars (Summary)
+
+- Stripe: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`.
+- Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, `FIGMA_FILE_ID` (optional per template).
+- Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+- App: `APP_BASE_URL`, `ALLOWED_ORIGINS`, `NODE_ENV`.
+
+---
+
+## Notes & Next Steps
+
+- Reuse existing research tooling listed in `SYSTEM_LATEST_IMPLEMENTATIONS.md` for the Research agent if available.
+- Ensure `vercel.json` marks webhook route with `"bodyParser": false` (raw body) or framework‑specific equivalent.
+- Keep each new file < 500 lines; split mappers and validators.
+- Document API examples in `docs/api/` once endpoints stabilize.
+

[2025-09-08T17:24:14] tokens used: 9604
[2025-09-08T17:24:14] turn diff:
diff --git a/docs/roadmaps/EUFM_monetization_technical_roadmap.md b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
new file mode 100644
index 0000000000000000000000000000000000000000..188500a0bc4a4b70e70939990eee3639775aa93f
--- /dev/null
+++ b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
@@ -0,0 +1,398 @@
+# EUFM Monetization Technical Implementation Roadmap
+
+Scope: EU consultant monetization MVP across Web app, Figma MCP integration, Stripe billing, and deployment. Project type: TypeScript/Node.js multi‑agent orchestration. Follow BaseAgent pattern and register in AgentFactory.
+
+Owner: EUFM Core Engineering • Updated: 2025‑09‑08
+
+---
+
+## 0) Guiding Principles
+
+- BaseAgent pattern: all new agents extend `BaseAgent` and register in `src/orchestrator/agentFactory.ts`.
+- Safety/quality: strict TypeScript, narrow interfaces, input validation, try/catch on all async boundaries, structured logging.
+- Performance: async pipelines, streaming where possible, lazy imports, files < 500 LoC, single‑responsibility functions.
+- EU compliance: GDPR, PSD2/SCA, SEPA, VAT via Stripe Tax, audit logs for billing events.
+- Phasing: deliver in small, testable slices; avoid big‑bang merges.
+
+---
+
+## Phase 1 — Web MVP (React + TypeScript)
+
+Goal: Consultant workflow UI with document upload, AI analysis pipeline hooks, demo components (deadline validator, research agent), responsive layout.
+
+Target repo area: `consultant-portal/` (Vite + React TS + Tailwind present)
+
+### 1.1 UI Architecture & Routing
+
+- Pages: `Upload`, `Analysis`, `Billing`, `Settings`, `Auth` (optional)
+- State: lightweight global store (Zustand already present at `consultant-portal/src/store/useAppStore.ts`).
+- Routing: React Router with code-splitting per route.
+- Layout: responsive dashboard shell with left nav (Upload, Analysis, Research, Billing) + top bar (account/SaaS plan).
+
+### 1.2 Document Upload Interface
+
+- Component: `UploadArea` (drag-and-drop + file picker) supporting PDF/DOCX/CSV.
+- Client constraints: max size (e.g., 20MB), file type whitelist.
+- API: `POST /api/upload` → returns `jobId` and `documentId`.
+- Storage (MVP): local `tmp/` or object store emulator; production: S3/GCS. Abstract via `src/tools/storageAdapter.ts`.
+- Virus scan placeholder: basic MIME/type guard; roadmap hook for ClamAV or cloud AV.
+
+### 1.3 AI Analysis Pipeline Integration (MVP contract)
+
+- API: `POST /api/analysis/start` with `{ documentId, analyses: ["deadline", "research"] }` → returns `jobId`.
+- API: `GET /api/analysis/:jobId` → returns status + partial results (stream-friendly model later).
+- Agent orchestration: server handler invokes `src/orchestrator/agentFactory.ts` to get appropriate agents.
+- Types: `AnalysisJob`, `AnalysisResult`, `DeadlineValidation`, `ResearchSummary` in `src/types/analysis.ts`.
+- Minimal queue: in-memory job map for MVP; optional BullMQ + Redis later.
+
+### 1.4 Demo Components
+
+- Deadline Validator: `DeadlineCard` showing program, due date, days remaining, risk flags. Backed by `DeadlineValidatorAgent`.
+- Research Agent: `ResearchPanel` with query input, related calls, sources; backed by `EnhancedAbacusAgent` (or `ResearchAgent`).
+- Loading/streaming UX: skeletons + progressive hydration of panels as results land.
+
+### 1.5 Error Handling & Telemetry
+
+- Client: toast + inline error banners; retry on transient 5xx.
+- Server: try/catch all handlers; map to 4xx/5xx; structured logs with requestId.
+- Observability: simple request logging to `logs/` (existing) + `console` in dev; hook for hosted logs later.
+
+### 1.6 Security & Privacy
+
+- Auth (MVP optional): email link or Clerk/Auth0; gate billing and analysis start behind auth if enabled.
+- PII handling: don’t persist document content server logs; redact paths/ids.
+- CORS: restrict to configured domain.
+
+Deliverables
+
+- Components: `UploadArea.tsx`, `DeadlineCard.tsx`, `ResearchPanel.tsx`, `AnalysisStatus.tsx`.
+- API routes: `/api/upload`, `/api/analysis/start`, `/api/analysis/:jobId` (server runtime aligned with deployment provider).
+- Types: `src/types/analysis.ts`.
+- Agents: `src/agents/deadlineValidatorAgent.ts`, `src/agents/researchAgent.ts` (BaseAgent pattern) + registration in AgentFactory.
+
+---
+
+## Phase 2 — Figma MCP Integration
+
+Goal: Design automation server and workflows to generate decks/templates, run bulk updates, and export to PPT/PDF.
+
+### 2.1 MCP Server Setup
+
+- Config: add MCP entry (Cursor/Figma Developer MCP).
+- Example JSON (Cursor):
+  ```json
+  {
+    "mcpServers": {
+      "figma-developer-mcp": { "command": "npx", "args": ["-y", "figma-developer-mcp"] }
+    }
+  }
+  ```
+- Env: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, optional `FIGMA_FILE_ID`.
+
+### 2.2 Integration Agent
+
+- New agent: `src/agents/figmaMCPAgent.ts` implementing BaseAgent.
+- Capabilities:
+  - Generate templates (JSON design spec → Figma frames/components).
+  - Bulk update text styles, logos, colors via MCP actions.
+  - Export frames/pages to PNG/PDF; feed into PPT pipeline.
+- Inputs: `{ templateType: 'pitch'|'one-pager'|'infographic', data: Record<string,unknown>, bulk?: boolean }`.
+- Outputs: `{ exportedUrls: string[], figmaNodeIds: string[] }`.
+
+### 2.3 Template Generation Pipeline
+
+- JSON templates stored in `templates/figma/*.json` (deck, infographic, UI kit).
+- Mapping util: `src/tools/figmaTemplateMapper.ts` converts business data → Figma node creation/update ops.
+- Validation: AJV schema for template JSON.
+
+### 2.4 Bulk Update Workflows
+
+- Batch operations: branding/color tokens, logo swaps, text placeholders.
+- Use MCP batch endpoints when available; otherwise chunked sequential operations with backoff.
+
+### 2.5 Export to PPT/PDF
+
+- PDF: Figma export API (PDF) for frames/pages; store in object storage and return URL.
+- PPTX: Build slides via `pptxgenjs` from exported PNGs + structured content; or HTML → PDF via headless Chromium for certain layouts.
+- Serverless compatibility: use `@sparticuz/chromium` if headless needed on Vercel/Netlify.
+
+Deliverables
+
+- Agent: `figmaMCPAgent.ts` + registration.
+- Templates: `templates/figma/*.json` + AJV schemas.
+- Tools: `figmaTemplateMapper.ts`, `exportService.ts`.
+- API: `/api/design/generate` and `/api/design/export`.
+
+---
+
+## Phase 3 — Stripe Payments
+
+Goal: Subscriptions (€299/month), usage‑based add‑ons, EU tax compliance, SEPA/PSD2, customer portal.
+
+### 3.1 Stripe Setup
+
+- Env vars: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`, `STRIPE_TAX_REGION`.
+- Dashboard:
+  - Product: EUFM Pro.
+  - Price: recurring monthly €299 (`STRIPE_PRICE_EUR_299`).
+  - Tax: enable Stripe Tax, automatic collection on `PaymentIntent`/`CheckoutSession`.
+  - Payment methods: `card`, `sepa_debit`; SCA via Payment Intents.
+
+### 3.2 Subscription Flow
+
+- Client: "Upgrade" button → POST `/api/billing/checkout` returns checkout URL → redirect.
+- Server: create `CheckoutSession` with mode `subscription`, `automatic_tax: {enabled: true}`, `payment_method_types: ['card','sepa_debit']`, EU locale.
+- Success: redirect to `/billing/success` with session id; fetch subscription status.
+- Portal: `/api/billing/portal` to create Stripe billing portal session.
+
+### 3.3 Usage‑Based Billing (Add‑ons)
+
+- Define metered price(s) for:
+  - Analysis jobs beyond monthly quota.
+  - Figma export batches beyond included limit.
+- Record usage via `usage_records.create` per job completion.
+- Display usage in Billing page with daily aggregation.
+
+### 3.4 Webhooks & State
+
+- Endpoint: `POST /api/stripe/webhook` (raw body).
+- Events: `checkout.session.completed`, `invoice.paid`, `invoice.payment_failed`, `customer.subscription.updated|deleted`, `customer.tax_id.created`.
+- Persistence: `User`, `Subscription`, `Usage` models (MVP can be JSON file or SQLite; production Postgres).
+- Idempotency: store processed event ids; return 2xx fast.
+- Logging: structured event logs, mask PII.
+
+### 3.5 EU Compliance
+
+- PSD2/SCA: always use Payment Intents/Checkout; offload SCA to Stripe.
+- SEPA: enable mandate for `sepa_debit`; note delayed settlement.
+- VAT: enable Stripe Tax, collect customer tax ID and billing country; show tax breakdown; store tax IDs on Customer.
+- Invoices: ensure tax rates applied; provide downloadable invoices in portal.
+
+Deliverables
+
+- API: `/api/billing/checkout`, `/api/billing/portal`, `/api/stripe/webhook`.
+- Client: `BillingPage` with plan, status, payment method, usage.
+- Models: `src/types/billing.ts`.
+- Agent (optional): `stripeBillingAgent.ts` to encapsulate billing ops for orchestrator‑driven flows.
+
+---
+
+## Phase 4 — Deployment Strategy
+
+Goal: Reliable hosting with fast iteration. Primary: Vercel; Alternative: Netlify.
+
+### 4.1 Hosting & Build
+
+- Vercel projects: `consultant-portal` (frontend + API routes). Framework preset: Vite/React.
+- Configure serverless API routes under `api/` or framework’s `functions/` directory.
+- Edge/runtime choices: default Node serverless for Stripe webhooks (needs raw body), not Edge runtime.
+
+### 4.2 Environment Variables
+
+- Vercel envs: add all secrets for `Production`, `Preview`, `Development`.
+- Required keys:
+  - Stripe: `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_PRICE_EUR_299`.
+  - Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`.
+  - Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+  - App: `APP_BASE_URL`, `ALLOWED_ORIGINS`.
+
+### 4.3 CI/CD
+
+- GitHub Actions workflow:
+  - Jobs: `lint` (ESLint), `typecheck` (tsc), `build` (vite build), `test` (unit only), `preview-deploy`.
+  - Required checks before merge to `main`.
+- Vercel Git integration for preview deployments on PRs.
+
+### 4.4 Domain & SSL
+
+- Add domain in Vercel; configure DNS; SSL auto‑provisioned.
+- Force HTTPS; HSTS header; CORS aligned to primary domain.
+
+Deliverables
+
+- `.vercel/project.json` (auto by Vercel), `vercel.json` for function config (raw body for webhooks).
+- `.github/workflows/ci.yml` with lint/typecheck/build/test.
+
+---
+
+## Data Models (MVP)
+
+```ts
+// src/types/analysis.ts
+export type AnalysisType = 'deadline' | 'research';
+
+export interface DocumentMeta {
+  id: string;
+  name: string;
+  mimeType: string;
+  size: number;
+  storageKey: string;
+  uploadedAt: string;
+}
+
+export interface AnalysisJob {
+  id: string;
+  documentId: string;
+  types: AnalysisType[];
+  status: 'queued' | 'running' | 'completed' | 'failed';
+  results?: AnalysisResult;
+  error?: string;
+}
+
+export interface DeadlineValidation {
+  program: string;
+  dueDate: string;
+  daysRemaining: number;
+  risks: string[];
+}
+
+export interface ResearchSummary {
+  queries: string[];
+  findings: { title: string; url?: string; summary: string }[];
+}
+
+export interface AnalysisResult {
+  deadline?: DeadlineValidation;
+  research?: ResearchSummary;
+}
+```
+
+```ts
+// src/types/billing.ts
+export interface SubscriptionState {
+  status: 'inactive' | 'trialing' | 'active' | 'past_due' | 'canceled' | 'unpaid';
+  priceId?: string;
+  currentPeriodEnd?: string;
+}
+
+export interface UsageRecordInput {
+  metric: 'analysis_job' | 'export_batch';
+  quantity: number;
+  timestamp: number;
+}
+```
+
+---
+
+## API Contract (MVP)
+
+- `POST /api/upload`
+  - Body: form‑data `file`
+  - 200: `{ documentId: string }`
+
+- `POST /api/analysis/start`
+  - Body: `{ documentId: string, analyses: AnalysisType[] }`
+  - 200: `{ jobId: string }`
+
+- `GET /api/analysis/:jobId`
+  - 200: `AnalysisJob`
+
+- `POST /api/design/generate`
+  - Body: `{ templateType, data, bulk? }`
+  - 200: `{ jobId: string }`
+
+- `POST /api/design/export`
+  - Body: `{ fileId|nodeIds, format: 'pdf'|'png'|'pptx' }`
+  - 200: `{ urls: string[] }`
+
+- `POST /api/billing/checkout`
+  - Body: `{ priceId?: string, successUrl, cancelUrl }`
+  - 200: `{ url: string }`
+
+- `POST /api/billing/portal`
+  - 200: `{ url: string }`
+
+- `POST /api/stripe/webhook` (raw body)
+  - 2xx on success; idempotent.
+
+---
+
+## New Agents (BaseAgent + AgentFactory registration)
+
+- `src/agents/deadlineValidatorAgent.ts`
+  - Input: `{ documentId }` → parses deadlines; uses EU calendar utils.
+  - Output: `DeadlineValidation`.
+
+- `src/agents/researchAgent.ts`
+  - Input: `{ topic, constraints? }` → structured web research using existing research tooling.
+  - Output: `ResearchSummary`.
+
+- `src/agents/figmaMCPAgent.ts`
+  - Input: template + data; Output: export URLs and nodeIds.
+
+- `src/agents/stripeBillingAgent.ts` (optional wrapper)
+  - Input: `{ userId, action, payload }`; handles checkout/portal/usage record creation.
+
+Registration: update `src/orchestrator/agentFactory.ts` with type → constructor map; add `type` strings: `deadline-validator`, `research`, `figma-mcp`, `stripe-billing`.
+
+---
+
+## Security, Compliance, Logging
+
+- Input validation: Zod/AJV at all API boundaries.
+- AuthZ: gate billing and analysis write endpoints to authenticated users (if auth added in MVP+1).
+- Secrets: never log; restrict to server runtime; rotate regularly.
+- GDPR: enable deletion of documents on request; data retention config; avoid storing raw PII in logs.
+- Stripe webhook: verify signatures; store only minimal billing metadata.
+- Structured logging: `{ level, ts, reqId, userId?, route, message, data }` to `logs/` and stdout.
+
+---
+
+## Testing Strategy (MVP)
+
+- Type checks: `tsc --noEmit` in CI.
+- Unit tests: pure utils (deadline calc, template mapper, API validators).
+- Integration tests: mocked handlers for `/api/analysis/*` and billing handlers with Stripe SDK mocked.
+- Manual E2E smoke: upload → analysis start → status polling; upgrade to billing; run webhook simulation.
+
+---
+
+## Implementation Order (Phased Sprints)
+
+1) Web MVP foundations
+   - Router, layout, state, Upload UI, API stubs.
+   - Types for analysis; in‑memory job registry.
+   - DeadlineValidatorAgent + UI card.
+   - ResearchAgent + panel.
+
+2) Figma MCP core path
+   - Configure MCP server + env.
+   - Implement `figmaMCPAgent` with template JSON and mapper.
+   - `/api/design/generate` and `/api/design/export` + storage.
+
+3) Stripe subscriptions
+   - Checkout/Portal endpoints + Billing page.
+   - Webhook handler with idempotency + state mapping.
+   - Enable Stripe Tax and SEPA; capture tax IDs.
+
+4) Deployment & CI/CD
+   - Vercel project + env vars; ensure webhook uses Node runtime.
+   - GitHub Actions: lint/typecheck/build/test.
+   - Domain + SSL + security headers.
+
+5) Usage‑based add‑ons (post‑MVP)
+   - Metered prices; usage records per analysis/export.
+   - Billing UI for usage charts.
+
+6) Hardening & UX polish
+   - Error states, retries, telemetry dashboards.
+   - Auth enablement if needed; data retention controls.
+
+---
+
+## Env Vars (Summary)
+
+- Stripe: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`.
+- Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, `FIGMA_FILE_ID` (optional per template).
+- Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+- App: `APP_BASE_URL`, `ALLOWED_ORIGINS`, `NODE_ENV`.
+
+---
+
+## Notes & Next Steps
+
+- Reuse existing research tooling listed in `SYSTEM_LATEST_IMPLEMENTATIONS.md` for the Research agent if available.
+- Ensure `vercel.json` marks webhook route with `"bodyParser": false` (raw body) or framework‑specific equivalent.
+- Keep each new file < 500 lines; split mappers and validators.
+- Document API examples in `docs/api/` once endpoints stabilize.
+

[2025-09-08T17:24:20] codex

**Roadmap Added**
- Full technical plan created at `docs/roadmaps/EUFM_monetization_technical_roadmap.md`.
- Covers Web MVP, Figma MCP integration, Stripe billing (EU-compliant), and deployment strategy.
- Aligns with BaseAgent pattern and AgentFactory registration requirements.

**Implementation Order**
- 1) Web MVP foundations: router/layout/state, `UploadArea`, analysis API stubs, types, in-memory job registry, `deadlineValidatorAgent`, `researchAgent`.
- 2) Figma MCP core: configure MCP server/env, `figmaMCPAgent`, JSON templates + mapper, `/api/design/generate|export`.
- 3) Stripe subscriptions: `/api/billing/checkout|portal`, `/api/stripe/webhook`, Billing page, Stripe Tax, SEPA, SCA.
- 4) Deployment & CI/CD: Vercel + envs, Node runtime for webhook raw body, GitHub Actions (lint/typecheck/build/test), domain/SSL/HSTS.
- 5) Usage-based add-ons: metered pricing, usage records, usage UI.
- 6) Hardening & UX: retries, telemetry, auth, data retention controls.

**Key Technical Specs**
- APIs: `/api/upload`, `/api/analysis/start`, `/api/analysis/:jobId`, `/api/design/generate`, `/api/design/export`, `/api/billing/checkout`, `/api/billing/portal`, `/api/stripe/webhook`.
- Data models: `src/types/analysis.ts`, `src/types/billing.ts` (DocumentMeta, AnalysisJob/Result, SubscriptionState, UsageRecordInput).
- Agents: ``, `researchAgent`, `figdeadlineMCPAgentValidatormaAgent`, optional `stripeBillingAgent` — all extend `BaseAgent` and register in `src/orchestrator/agentFactory.ts`.
- Env vars: Stripe (`STRIPE_SECRET_KEY`, `STRHOOKIPE_WEB_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_PRICE_EUR_299`), Figma (`FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`), Storage (S3/GCS), App (`APP_BASE_URL`, `ALLOWED_ORIGINS`).
- Compliance: PSD2/SCA (Payment Intents/Checkout), SEPA debit, Stripe Tax, webhook signature verification, GDPR logging/redaction.

**Suggested Next Actions**
- Confirm Stripe Product/Price IDs and enable Stripe Tax SEPA.
- Choose storage provider (S3/GCS) for document/extract exports and set envs.
- Confirm + Vercel deployment target and create `vercel.json` for raw-body webhook.
- Want me to scaffold Phase 1 (UI, types, API stubs, agents) now and wire AgentFactory?
[2025-09-08T17:24:31] tokens used: 5473
[2025-09-08T17:24:31] turn diff:
diff --git a/docs/roadmaps/EUFM_monetization_technical_roadmap.md b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
new file mode 100644
index 0000000000000000000000000000000000000000..188500a0bc4a4b70e70939990eee3639775aa93f
--- /dev/null
+++ b/docs/roadmaps/EUFM_monetization_technical_roadmap.md
@@ -0,0 +1,398 @@
+# EUFM Monetization Technical Implementation Roadmap
+
+Scope: EU consultant monetization MVP across Web app, Figma MCP integration, Stripe billing, and deployment. Project type: TypeScript/Node.js multi‑agent orchestration. Follow BaseAgent pattern and register in AgentFactory.
+
+Owner: EUFM Core Engineering • Updated: 2025‑09‑08
+
+---
+
+## 0) Guiding Principles
+
+- BaseAgent pattern: all new agents extend `BaseAgent` and register in `src/orchestrator/agentFactory.ts`.
+- Safety/quality: strict TypeScript, narrow interfaces, input validation, try/catch on all async boundaries, structured logging.
+- Performance: async pipelines, streaming where possible, lazy imports, files < 500 LoC, single‑responsibility functions.
+- EU compliance: GDPR, PSD2/SCA, SEPA, VAT via Stripe Tax, audit logs for billing events.
+- Phasing: deliver in small, testable slices; avoid big‑bang merges.
+
+---
+
+## Phase 1 — Web MVP (React + TypeScript)
+
+Goal: Consultant workflow UI with document upload, AI analysis pipeline hooks, demo components (deadline validator, research agent), responsive layout.
+
+Target repo area: `consultant-portal/` (Vite + React TS + Tailwind present)
+
+### 1.1 UI Architecture & Routing
+
+- Pages: `Upload`, `Analysis`, `Billing`, `Settings`, `Auth` (optional)
+- State: lightweight global store (Zustand already present at `consultant-portal/src/store/useAppStore.ts`).
+- Routing: React Router with code-splitting per route.
+- Layout: responsive dashboard shell with left nav (Upload, Analysis, Research, Billing) + top bar (account/SaaS plan).
+
+### 1.2 Document Upload Interface
+
+- Component: `UploadArea` (drag-and-drop + file picker) supporting PDF/DOCX/CSV.
+- Client constraints: max size (e.g., 20MB), file type whitelist.
+- API: `POST /api/upload` → returns `jobId` and `documentId`.
+- Storage (MVP): local `tmp/` or object store emulator; production: S3/GCS. Abstract via `src/tools/storageAdapter.ts`.
+- Virus scan placeholder: basic MIME/type guard; roadmap hook for ClamAV or cloud AV.
+
+### 1.3 AI Analysis Pipeline Integration (MVP contract)
+
+- API: `POST /api/analysis/start` with `{ documentId, analyses: ["deadline", "research"] }` → returns `jobId`.
+- API: `GET /api/analysis/:jobId` → returns status + partial results (stream-friendly model later).
+- Agent orchestration: server handler invokes `src/orchestrator/agentFactory.ts` to get appropriate agents.
+- Types: `AnalysisJob`, `AnalysisResult`, `DeadlineValidation`, `ResearchSummary` in `src/types/analysis.ts`.
+- Minimal queue: in-memory job map for MVP; optional BullMQ + Redis later.
+
+### 1.4 Demo Components
+
+- Deadline Validator: `DeadlineCard` showing program, due date, days remaining, risk flags. Backed by `DeadlineValidatorAgent`.
+- Research Agent: `ResearchPanel` with query input, related calls, sources; backed by `EnhancedAbacusAgent` (or `ResearchAgent`).
+- Loading/streaming UX: skeletons + progressive hydration of panels as results land.
+
+### 1.5 Error Handling & Telemetry
+
+- Client: toast + inline error banners; retry on transient 5xx.
+- Server: try/catch all handlers; map to 4xx/5xx; structured logs with requestId.
+- Observability: simple request logging to `logs/` (existing) + `console` in dev; hook for hosted logs later.
+
+### 1.6 Security & Privacy
+
+- Auth (MVP optional): email link or Clerk/Auth0; gate billing and analysis start behind auth if enabled.
+- PII handling: don’t persist document content server logs; redact paths/ids.
+- CORS: restrict to configured domain.
+
+Deliverables
+
+- Components: `UploadArea.tsx`, `DeadlineCard.tsx`, `ResearchPanel.tsx`, `AnalysisStatus.tsx`.
+- API routes: `/api/upload`, `/api/analysis/start`, `/api/analysis/:jobId` (server runtime aligned with deployment provider).
+- Types: `src/types/analysis.ts`.
+- Agents: `src/agents/deadlineValidatorAgent.ts`, `src/agents/researchAgent.ts` (BaseAgent pattern) + registration in AgentFactory.
+
+---
+
+## Phase 2 — Figma MCP Integration
+
+Goal: Design automation server and workflows to generate decks/templates, run bulk updates, and export to PPT/PDF.
+
+### 2.1 MCP Server Setup
+
+- Config: add MCP entry (Cursor/Figma Developer MCP).
+- Example JSON (Cursor):
+  ```json
+  {
+    "mcpServers": {
+      "figma-developer-mcp": { "command": "npx", "args": ["-y", "figma-developer-mcp"] }
+    }
+  }
+  ```
+- Env: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, optional `FIGMA_FILE_ID`.
+
+### 2.2 Integration Agent
+
+- New agent: `src/agents/figmaMCPAgent.ts` implementing BaseAgent.
+- Capabilities:
+  - Generate templates (JSON design spec → Figma frames/components).
+  - Bulk update text styles, logos, colors via MCP actions.
+  - Export frames/pages to PNG/PDF; feed into PPT pipeline.
+- Inputs: `{ templateType: 'pitch'|'one-pager'|'infographic', data: Record<string,unknown>, bulk?: boolean }`.
+- Outputs: `{ exportedUrls: string[], figmaNodeIds: string[] }`.
+
+### 2.3 Template Generation Pipeline
+
+- JSON templates stored in `templates/figma/*.json` (deck, infographic, UI kit).
+- Mapping util: `src/tools/figmaTemplateMapper.ts` converts business data → Figma node creation/update ops.
+- Validation: AJV schema for template JSON.
+
+### 2.4 Bulk Update Workflows
+
+- Batch operations: branding/color tokens, logo swaps, text placeholders.
+- Use MCP batch endpoints when available; otherwise chunked sequential operations with backoff.
+
+### 2.5 Export to PPT/PDF
+
+- PDF: Figma export API (PDF) for frames/pages; store in object storage and return URL.
+- PPTX: Build slides via `pptxgenjs` from exported PNGs + structured content; or HTML → PDF via headless Chromium for certain layouts.
+- Serverless compatibility: use `@sparticuz/chromium` if headless needed on Vercel/Netlify.
+
+Deliverables
+
+- Agent: `figmaMCPAgent.ts` + registration.
+- Templates: `templates/figma/*.json` + AJV schemas.
+- Tools: `figmaTemplateMapper.ts`, `exportService.ts`.
+- API: `/api/design/generate` and `/api/design/export`.
+
+---
+
+## Phase 3 — Stripe Payments
+
+Goal: Subscriptions (€299/month), usage‑based add‑ons, EU tax compliance, SEPA/PSD2, customer portal.
+
+### 3.1 Stripe Setup
+
+- Env vars: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`, `STRIPE_TAX_REGION`.
+- Dashboard:
+  - Product: EUFM Pro.
+  - Price: recurring monthly €299 (`STRIPE_PRICE_EUR_299`).
+  - Tax: enable Stripe Tax, automatic collection on `PaymentIntent`/`CheckoutSession`.
+  - Payment methods: `card`, `sepa_debit`; SCA via Payment Intents.
+
+### 3.2 Subscription Flow
+
+- Client: "Upgrade" button → POST `/api/billing/checkout` returns checkout URL → redirect.
+- Server: create `CheckoutSession` with mode `subscription`, `automatic_tax: {enabled: true}`, `payment_method_types: ['card','sepa_debit']`, EU locale.
+- Success: redirect to `/billing/success` with session id; fetch subscription status.
+- Portal: `/api/billing/portal` to create Stripe billing portal session.
+
+### 3.3 Usage‑Based Billing (Add‑ons)
+
+- Define metered price(s) for:
+  - Analysis jobs beyond monthly quota.
+  - Figma export batches beyond included limit.
+- Record usage via `usage_records.create` per job completion.
+- Display usage in Billing page with daily aggregation.
+
+### 3.4 Webhooks & State
+
+- Endpoint: `POST /api/stripe/webhook` (raw body).
+- Events: `checkout.session.completed`, `invoice.paid`, `invoice.payment_failed`, `customer.subscription.updated|deleted`, `customer.tax_id.created`.
+- Persistence: `User`, `Subscription`, `Usage` models (MVP can be JSON file or SQLite; production Postgres).
+- Idempotency: store processed event ids; return 2xx fast.
+- Logging: structured event logs, mask PII.
+
+### 3.5 EU Compliance
+
+- PSD2/SCA: always use Payment Intents/Checkout; offload SCA to Stripe.
+- SEPA: enable mandate for `sepa_debit`; note delayed settlement.
+- VAT: enable Stripe Tax, collect customer tax ID and billing country; show tax breakdown; store tax IDs on Customer.
+- Invoices: ensure tax rates applied; provide downloadable invoices in portal.
+
+Deliverables
+
+- API: `/api/billing/checkout`, `/api/billing/portal`, `/api/stripe/webhook`.
+- Client: `BillingPage` with plan, status, payment method, usage.
+- Models: `src/types/billing.ts`.
+- Agent (optional): `stripeBillingAgent.ts` to encapsulate billing ops for orchestrator‑driven flows.
+
+---
+
+## Phase 4 — Deployment Strategy
+
+Goal: Reliable hosting with fast iteration. Primary: Vercel; Alternative: Netlify.
+
+### 4.1 Hosting & Build
+
+- Vercel projects: `consultant-portal` (frontend + API routes). Framework preset: Vite/React.
+- Configure serverless API routes under `api/` or framework’s `functions/` directory.
+- Edge/runtime choices: default Node serverless for Stripe webhooks (needs raw body), not Edge runtime.
+
+### 4.2 Environment Variables
+
+- Vercel envs: add all secrets for `Production`, `Preview`, `Development`.
+- Required keys:
+  - Stripe: `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_PRICE_EUR_299`.
+  - Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`.
+  - Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+  - App: `APP_BASE_URL`, `ALLOWED_ORIGINS`.
+
+### 4.3 CI/CD
+
+- GitHub Actions workflow:
+  - Jobs: `lint` (ESLint), `typecheck` (tsc), `build` (vite build), `test` (unit only), `preview-deploy`.
+  - Required checks before merge to `main`.
+- Vercel Git integration for preview deployments on PRs.
+
+### 4.4 Domain & SSL
+
+- Add domain in Vercel; configure DNS; SSL auto‑provisioned.
+- Force HTTPS; HSTS header; CORS aligned to primary domain.
+
+Deliverables
+
+- `.vercel/project.json` (auto by Vercel), `vercel.json` for function config (raw body for webhooks).
+- `.github/workflows/ci.yml` with lint/typecheck/build/test.
+
+---
+
+## Data Models (MVP)
+
+```ts
+// src/types/analysis.ts
+export type AnalysisType = 'deadline' | 'research';
+
+export interface DocumentMeta {
+  id: string;
+  name: string;
+  mimeType: string;
+  size: number;
+  storageKey: string;
+  uploadedAt: string;
+}
+
+export interface AnalysisJob {
+  id: string;
+  documentId: string;
+  types: AnalysisType[];
+  status: 'queued' | 'running' | 'completed' | 'failed';
+  results?: AnalysisResult;
+  error?: string;
+}
+
+export interface DeadlineValidation {
+  program: string;
+  dueDate: string;
+  daysRemaining: number;
+  risks: string[];
+}
+
+export interface ResearchSummary {
+  queries: string[];
+  findings: { title: string; url?: string; summary: string }[];
+}
+
+export interface AnalysisResult {
+  deadline?: DeadlineValidation;
+  research?: ResearchSummary;
+}
+```
+
+```ts
+// src/types/billing.ts
+export interface SubscriptionState {
+  status: 'inactive' | 'trialing' | 'active' | 'past_due' | 'canceled' | 'unpaid';
+  priceId?: string;
+  currentPeriodEnd?: string;
+}
+
+export interface UsageRecordInput {
+  metric: 'analysis_job' | 'export_batch';
+  quantity: number;
+  timestamp: number;
+}
+```
+
+---
+
+## API Contract (MVP)
+
+- `POST /api/upload`
+  - Body: form‑data `file`
+  - 200: `{ documentId: string }`
+
+- `POST /api/analysis/start`
+  - Body: `{ documentId: string, analyses: AnalysisType[] }`
+  - 200: `{ jobId: string }`
+
+- `GET /api/analysis/:jobId`
+  - 200: `AnalysisJob`
+
+- `POST /api/design/generate`
+  - Body: `{ templateType, data, bulk? }`
+  - 200: `{ jobId: string }`
+
+- `POST /api/design/export`
+  - Body: `{ fileId|nodeIds, format: 'pdf'|'png'|'pptx' }`
+  - 200: `{ urls: string[] }`
+
+- `POST /api/billing/checkout`
+  - Body: `{ priceId?: string, successUrl, cancelUrl }`
+  - 200: `{ url: string }`
+
+- `POST /api/billing/portal`
+  - 200: `{ url: string }`
+
+- `POST /api/stripe/webhook` (raw body)
+  - 2xx on success; idempotent.
+
+---
+
+## New Agents (BaseAgent + AgentFactory registration)
+
+- `src/agents/deadlineValidatorAgent.ts`
+  - Input: `{ documentId }` → parses deadlines; uses EU calendar utils.
+  - Output: `DeadlineValidation`.
+
+- `src/agents/researchAgent.ts`
+  - Input: `{ topic, constraints? }` → structured web research using existing research tooling.
+  - Output: `ResearchSummary`.
+
+- `src/agents/figmaMCPAgent.ts`
+  - Input: template + data; Output: export URLs and nodeIds.
+
+- `src/agents/stripeBillingAgent.ts` (optional wrapper)
+  - Input: `{ userId, action, payload }`; handles checkout/portal/usage record creation.
+
+Registration: update `src/orchestrator/agentFactory.ts` with type → constructor map; add `type` strings: `deadline-validator`, `research`, `figma-mcp`, `stripe-billing`.
+
+---
+
+## Security, Compliance, Logging
+
+- Input validation: Zod/AJV at all API boundaries.
+- AuthZ: gate billing and analysis write endpoints to authenticated users (if auth added in MVP+1).
+- Secrets: never log; restrict to server runtime; rotate regularly.
+- GDPR: enable deletion of documents on request; data retention config; avoid storing raw PII in logs.
+- Stripe webhook: verify signatures; store only minimal billing metadata.
+- Structured logging: `{ level, ts, reqId, userId?, route, message, data }` to `logs/` and stdout.
+
+---
+
+## Testing Strategy (MVP)
+
+- Type checks: `tsc --noEmit` in CI.
+- Unit tests: pure utils (deadline calc, template mapper, API validators).
+- Integration tests: mocked handlers for `/api/analysis/*` and billing handlers with Stripe SDK mocked.
+- Manual E2E smoke: upload → analysis start → status polling; upgrade to billing; run webhook simulation.
+
+---
+
+## Implementation Order (Phased Sprints)
+
+1) Web MVP foundations
+   - Router, layout, state, Upload UI, API stubs.
+   - Types for analysis; in‑memory job registry.
+   - DeadlineValidatorAgent + UI card.
+   - ResearchAgent + panel.
+
+2) Figma MCP core path
+   - Configure MCP server + env.
+   - Implement `figmaMCPAgent` with template JSON and mapper.
+   - `/api/design/generate` and `/api/design/export` + storage.
+
+3) Stripe subscriptions
+   - Checkout/Portal endpoints + Billing page.
+   - Webhook handler with idempotency + state mapping.
+   - Enable Stripe Tax and SEPA; capture tax IDs.
+
+4) Deployment & CI/CD
+   - Vercel project + env vars; ensure webhook uses Node runtime.
+   - GitHub Actions: lint/typecheck/build/test.
+   - Domain + SSL + security headers.
+
+5) Usage‑based add‑ons (post‑MVP)
+   - Metered prices; usage records per analysis/export.
+   - Billing UI for usage charts.
+
+6) Hardening & UX polish
+   - Error states, retries, telemetry dashboards.
+   - Auth enablement if needed; data retention controls.
+
+---
+
+## Env Vars (Summary)
+
+- Stripe: `STRIPE_SECRET_KEY`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`, `STRIPE_WEBHOOK_SECRET`, `STRIPE_PRICE_EUR_299`.
+- Figma: `FIGMA_PERSONAL_TOKEN`, `FIGMA_TEAM_ID`, `FIGMA_FILE_ID` (optional per template).
+- Storage: `S3_BUCKET`, `S3_REGION`, `S3_ACCESS_KEY_ID`, `S3_SECRET_ACCESS_KEY` (or GCS equivalents).
+- App: `APP_BASE_URL`, `ALLOWED_ORIGINS`, `NODE_ENV`.
+
+---
+
+## Notes & Next Steps
+
+- Reuse existing research tooling listed in `SYSTEM_LATEST_IMPLEMENTATIONS.md` for the Research agent if available.
+- Ensure `vercel.json` marks webhook route with `"bodyParser": false` (raw body) or framework‑specific equivalent.
+- Keep each new file < 500 lines; split mappers and validators.
+- Document API examples in `docs/api/` once endpoints stabilize.
+


Process exited with code: 0
